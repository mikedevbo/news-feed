@using NewsFeed.Shared
@implements IDisposable
@inject StateContainer StateContainer
@inject HttpClient Http

<div class="block">
  @this.AccountId
</div>

@foreach(var tweet in this.tweets)
{
    <div class="box">
        @tweet.Text
    </div>
}

@code
{
    public string AccountId = "";
    public List<TweetDto> tweets = new List<TweetDto>();

    protected override void OnInitialized()
    {
        this.StateContainer.OnSelectedUserIdChange += LoadTweets;
        this.StateContainer.OnSelectedAccountIdDownloadNewTweetsChange += DownloadNewTweets;
    }

    private async void LoadTweets(int accountId)
    {
        //this.AccountId = accountId;
        //var tweets = await Http.GetFromJsonAsync<List<TweetDto>>($"NewsFeed/GetDownloadedTweets?userId={accountId}");

        //if (tweets is not null)
        //{
        //    this.tweets = tweets;
        //    base.StateHasChanged();
        //}
    }

    private async void DownloadNewTweets(string accountId)
    {
        await Http.GetAsync($"NewsFeed/DownloadNewTweets?userId={accountId}");
        base.StateHasChanged();
    }

    public void Dispose()
    {
        this.StateContainer.OnSelectedUserIdChange -= LoadTweets;
        this.StateContainer.OnSelectedAccountIdDownloadNewTweetsChange -= DownloadNewTweets;
    }
}
