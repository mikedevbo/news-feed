@using NewsFeed.Shared
@inject StateContainer StateContainer
@inject HttpClient Http

<aside class="menu">
    @{var groups = this.accounts.GroupBy(acc => acc.GroupName);}
    @foreach(var group in groups)
    {
        <p class="menu-label">@group.Key</p>
        <ul class="menu-list">
            @foreach(var account in group)
            {
                <li><a class="@(account.IsActive ? "is-active" : string.Empty)" @onclick="() => SetAccountAsSelected(account)">@account.Id</a></li>
            }
        </ul>
    }
</aside>

@code {

    private List<ViewModel.Account> accounts = new List<ViewModel.Account>();

    protected override async Task OnInitializedAsync()
    {
        var accounts = await Http.GetFromJsonAsync<List<Account>>("NewsFeed/GetAccounts");
        if (accounts != null && accounts.Count() > 0)
        {
            this.accounts.AddRange(ViewModel.Map(accounts));
        }
    }

    public void SetAccountAsSelected(ViewModel.Account account)
    {
        var prev = (from acc in this.accounts where acc.Id == StateContainer.SelectedAccountId select acc).FirstOrDefault();

        if (prev != null)
        {
            prev.IsActive = false;
        }

        var current = (from acc in this.accounts where acc.Id == account.Id select acc).FirstOrDefault();

        if (current != null)
        {
            current.IsActive = true;
            this.StateContainer.SelectedAccountId = account.Id;
        }
    }

    public static class ViewModel
    {
        public class Account
        {
            public string Id { get; set; } = "";
            public string GroupName { get; set; } = "";
            public bool IsActive { get; set; }
        }

        public static List<Account> Map(List<NewsFeed.Shared.Account> accounts)
        {
            var result = new List<Account>();

            foreach(var model in accounts)
            {
                result.Add(new Account
                    {
                        Id = model.Id,
                        GroupName = model.GroupName,
                        IsActive = false
                    });
            }

            return result;
        }
    }
}
