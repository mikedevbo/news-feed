@using static NewsFeed.Shared.Dto.TwitterMenuResponse
@inject StateContainer StateContainer
@inject HttpClient Http
@inject NewsFeedApiClient apiClient

<label>Group Name:</label>
<input type="text" @bind="this.groupName" />
<button @onclick="e => this.AddGroup()">Add Group</button>

@foreach (var group in menuData.Groups)
{
    <p>@group.Name</p>
    <ul>
        @foreach (var user in group.Users)
        {
            <li><a style="@(this.SetUserSelectionColor(user.IsSelected))" @onclick="e => this.SetUserAsSelected(user)">@user.Name</a></li>
        }
    </ul>
}

@code {
    private TwitterMenuResponse menuData = new TwitterMenuResponse(new List<Group>());
    private (User user, int groupIndex, int userIndex) selectedItem = default;
    private string groupName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        this.menuData = await apiClient.GetTwitterMenu(this.StateContainer.AccountId);
    }

    private string SetUserSelectionColor(bool isSelected)
    {
        return isSelected ? "color: red" : string.Empty;
    }

    private void SetUserAsSelected(User user)
    {
        // unselect previus item
        if (selectedItem.user is not null)
        {
            this.menuData.Groups[selectedItem.groupIndex].Users[selectedItem.userIndex] = selectedItem.user with { IsSelected = false };
        }

        // select currnt item
        var groupIndex = this.menuData.Groups.FindIndex(g => g.Id == user.GroupId);
        var userIndex = this.menuData.Groups[groupIndex].Users.FindIndex(u => u.Id == user.Id);

        this.menuData.Groups[groupIndex].Users[userIndex] = user with { IsSelected = true };

        this.selectedItem = (user, groupIndex, userIndex);
        this.StateContainer.SelectedUserId = user.Id;
    }

    private async Task AddGroup()
    {
        await this.apiClient.AddTwitterGroup(this.StateContainer.AccountId, this.groupName);
    }
}
