@implements IDisposable
@inject StateContainer StateContainer
@inject HttpClient Http
@inject NewsFeedTwitterApiClient apiClient

<MudTreeView @bind-SelectedValue="this.selectedItemId" Hover="false">
@foreach(var gu in this.menuItems.GroupUsers)
{
    var groupId = gu.Key;
    var userIds = gu.Value;

    var group = this.menuItems.Groups[groupId];
    if (!this.groupIsExpanded.ContainsKey(group.Id))
    {
        this.groupIsExpanded.Add(group.Id, true);
    }

    <MudTreeViewItem @bind-Expanded="@this.groupIsExpanded[group.Id]"
        Text="@group.Name"
        Value="@group.Id"
        OnClick="this.OnClickGroup">
            @foreach(var userId in userIds)
            {
                var user = this.menuItems.Users[userId];
                <MudTreeViewItem
                    Text="@user.Name"
                    Value="@user.Id"
                    OnClick="this.OnClickUser" />
            }
    </MudTreeViewItem>
}
</MudTreeView>

@code
{
    private MenuItems menuItems = new MenuItems();
    private Dictionary<int, bool> groupIsExpanded = new Dictionary<int, bool>();
    private int selectedItemId;

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
}

@code {

    protected override async Task OnInitializedAsync()
    {
        StateContainer.Subscribers += this.Handle;

        this.menuItems = await apiClient.GetMenu(this.StateContainer.AccountId);
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@code {
    
    private void Handle(IMessage message)
    {
    }
}

@code
{
    private async void OnClick(Action action)
    {
        if (this.selectedItemId > 0)
        {
            action();
        }

        await this.OnClickCallback.InvokeAsync();
    }

    private void OnClickGroup(EventArgs args)
    {
        this.OnClick(() =>
        {
            var group = this.menuItems.Groups[this.selectedItemId];
            this.StateContainer.Publish(new GroupSelected(group));
        });
    }

    private void OnClickUser(EventArgs args)
    {
        this.OnClick(() =>
        { 
            var user = this.menuItems.Users[this.selectedItemId];
            this.StateContainer.Publish(new UserSelected(user));
        });
    }
}
