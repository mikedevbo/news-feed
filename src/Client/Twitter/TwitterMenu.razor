@implements IDisposable
@inject StateContainer StateContainer
@inject HttpClient Http
@inject TwitterNewsFeedApiClient apiClient

<div class="w3-sidebar w3-bar-block w3-collapse" style="width: 200px; display: @isDisplaySidebar" id="mySidebar">
    <div class="w3-sidebar w3-bar-block w3-card" style="width: 160px;">
        <h3 class="w3-container">NewsFeed</h3>
        <button class="w3-bar-item w3-button w3-large w3-hide-large" @onclick="e => DisplaySidebar(false)">Close &times;</button>
        <hr />
        <a href="#" class="w3-bar-item w3-button">GetAll</a>
        <hr />

        @foreach (var group in this.groups)
        {
            <div class="w3-bar-item w3-button" @onclick="e => OnClickGroup(group)">
                @group.Name <i class="fa fa-caret-down"></i>
            </div>

            <div class="w3-hide w3-card-4 @group.IsExpandedCss">

            @if (group.Users.Any())
            {
                <a href="#" class="w3-bar-item w3-button">GetAll</a>
            }

            @foreach(var user in group.Users)
            {
                <a href="#" class="w3-bar-item w3-button" @onclick="e => OnClickUser(user)">@user.Name</a>
            }
            </div>
        }

    </div>
</div>

<div class="w3-main" style="margin-left:200px" />
<button class="w3-button w3-xlarge w3-hide-large" @onclick="e => DisplaySidebar(true)">&#9776;</button>

@code
{
    private List<Group> groups = new List<Group>();
    private int selectedItemId;

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
}

@*Css*@
@code
{
    private string isDisplaySidebar = "none";
    private void DisplaySidebar(bool isVisible)
    {
        this.isDisplaySidebar = isVisible ? "block" : "none";
    }
}

@*ViewModel*@
@code
{
    public class Group
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public bool IsExpanded { get; set; }

        public List<User> Users { get; set; } = new List<User>();

        public string IsExpandedCss => IsExpanded ? "w3-show" : string.Empty;
    }

    public class User
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public string TwitterUserId { get; set; } = string.Empty;
    }
}

@code {

    protected override async Task OnInitializedAsync()
    {
        StateContainer.Subscribers += this.Handle;

        var result = await this.Http.GetStringAsync($"/twitter/accounts/{this.StateContainer.AccountId}/menu");
        this.groups = result.DeserializeXml<List<Group>>();
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@code {
    
    private void Handle(IMessage message)
    {
    }
}

@code
{   
    private async void OnClick(Action action)
    {
        action();
        await this.OnClickCallback.InvokeAsync();
    }

    private void OnClickGroup(Group group)
    {
        this.OnClick(() =>
        {
            group.IsExpanded = !group.IsExpanded;
            this.StateContainer.Publish(new GroupSelected(group.Id, group.Name));
        });
    }

    private void OnClickUser(User user)
    {
        this.OnClick(() =>
        { 
            this.StateContainer.Publish(new UserSelected(user.Id, user.Name, user.TwitterUserId));
        });
    }
}
