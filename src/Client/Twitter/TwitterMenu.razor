@implements IDisposable
@inject StateContainer StateContainer
@inject HttpClient Http

<div class="w3-sidebar w3-bar-block w3-collapse" style="width: 200px; display: @isDisplaySidebar" id="mySidebar">
    <div class="w3-sidebar w3-bar-block w3-card" style="width: 160px;">
        <h3 class="w3-container">NewsFeed</h3>
        <button class="w3-bar-item w3-button w3-large w3-hide-large" @onclick="e => DisplaySidebar(false)">Close &times;</button>
        <hr />
        <a href="#" class="w3-bar-item w3-button" @onclick="e => OnClickGetAll()">GetAll</a>
        <hr />

        @foreach (var group in this.groups)
        {
            <div class="w3-bar-item w3-button" @onclick="e => OnClickGroup(group)">
                @group.Name <i class="fa fa-caret-down"></i>
            </div>

            <div class="w3-hide w3-card-4 @group.IsExpandedCss">

            @if (group.Users.Any())
            {
                <a href="#" class="w3-bar-item w3-button" @onclick="e => OnClickGetAll(group)">GetAll</a>
            }

            @foreach(var user in group.Users)
            {
                    <a href="#" class="w3-bar-item w3-button" style="@user.UnreadTweetsCss" @onclick="e => OnClickUser(user)">@ShowUser(user)</a>
            }
            </div>
        }

    </div>
</div>

<div class="w3-main" style="margin-left:200px">
    <button class="w3-button w3-xlarge w3-hide-large" @onclick="e => DisplaySidebar(true)">&#9776;</button>
    <TwitterTweets />
</div>

@*Params*@
@code
{
    private List<Group> groups = new List<Group>();
    private int selectedItemId;

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
}

@*Css*@
@code
{
    private string isDisplaySidebar = "none";
    private void DisplaySidebar(bool isVisible)
    {
        this.isDisplaySidebar = isVisible ? "block" : "none";
    }

    private string ShowUser(User user)
    {
        var unreadView = user.UnreadTweetsCount > 0 ? $"{user.Name} ({user.UnreadTweetsCount})" : user.Name;
        var donwloadView = user.IsTweetsDownloading ? $"~{unreadView}" : unreadView;

        return donwloadView;
    }
}

@*ViewModel*@
@code
{
    public class Group
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public bool IsExpanded { get; set; } = true;

        public List<User> Users { get; set; } = new List<User>();

        public string IsExpandedCss => IsExpanded ? "w3-show" : string.Empty;
    }

    public class User
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public string TwitterUserId { get; set; } = string.Empty;

        public int UnreadTweetsCount { get; set; }

        public string UnreadTweetsCss => UnreadTweetsCount > 0 ? "font-weight: bold" : "font-weight: normal";

        public bool IsTweetsDownloading { get; set; }
    }

    public class UserDownladTweetsState
    {
        public int UserId { get; set; }

        public bool IsDownloadingTweets { get; set; }

        public int UnreadTweetsCount { get; set; }
    }

    private async Task<List<Group>> Query(GetMenuRequest request)
    {
        var result = await Extensions.CallApi(Http, request);
        return result.DeserializeXml<List<Group>>();
    }

    private async Task<List<UserDownladTweetsState>> Query(GetDownloadingTweetsState request)
    {
        var result = await Extensions.CallApi(Http, request);
        return result.DeserializeXml<List<UserDownladTweetsState>>();
    }

    private void SetUserDownloadingState(int userId, bool state, int unreadTweetsCount = 0)
    {
        var user = this.groups.SelectMany(g => g.Users).FirstOrDefault(u => u.Id == userId);
        if(user is not null)
        {
            user.IsTweetsDownloading = state;

            if (!state)
            {
                user.UnreadTweetsCount = unreadTweetsCount;
            }
        }
    }
}

@code {

    protected override async Task OnInitializedAsync()
    {
        StateContainer.Subscribers += this.Handle;

        this.groups = await this.Query(new GetMenuRequest(StateContainer.AccountId));
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@*StateContainer*@
@code {

    private async void Handle(IMessage message)
    {
        switch (message)
        {
            case TweetsLoaded tweets:
                var user = this.groups.SelectMany(g => g.Users).FirstOrDefault(u => u.Id == tweets.UserId)!;
                user.UnreadTweetsCount = tweets.TweetsCount;
                StateHasChanged();
                break;

            case DownloadTweetsRequested data:
                this.SetUserDownloadingState(data.UserId, true);
                StateHasChanged();
                await this.StartDownloadingTweets(new List<(int, string)> { (data.UserId, data.TwitterUserId)});
                StateHasChanged();
                break;
        }
    }
}

@*Actions*@
@code
{
    private async void OnClick(Action action)
    {
        action();
        await this.OnClickCallback.InvokeAsync();
    }

    private void OnClickGroup(Group group)
    {
        this.OnClick(() =>
        {
            group.IsExpanded = !group.IsExpanded;
            this.StateContainer.Publish(new GroupSelected(group.Id, group.Name));
        });
    }

    private void OnClickUser(User user)
    {
        this.OnClick(() =>
        { 
            this.StateContainer.Publish(new UserSelected(user.Id, user.Name, user.TwitterUserId));
        });
    }

    private async Task OnClickGetAll()
    {
        var users = this.groups.SelectMany(g => g.Users).ToList();
        foreach(var user in users)
        {
            user.IsTweetsDownloading = true;
        }

        await this.StartDownloadingTweets(users.Select(u => (u.Id, u.TwitterUserId)).ToList());
    }

    private async Task OnClickGetAll(Group group)
    {
        var users = this.groups.Where(g => g.Id == group.Id).SelectMany(g => g.Users).ToList();
        foreach (var user in users)
        {
            user.IsTweetsDownloading = true;
        }

        await this.StartDownloadingTweets(users.Select(u => (u.Id, u.TwitterUserId)).ToList());
    }
}

@*Other*@
@code
{
    private async Task StartDownloadingTweets(List<(int userId, string twitterUserId)> users)
    {
        // start downloading tweets
        var request = new StartDownloadingTweetsRequest(users.Select(u => new StartDownloadingTweetsRequest.UserData(u.userId, u.twitterUserId)).ToList());
        await Extensions.CallApi(Http, request);

        // check results
        bool inProgress = false;
        int tryCount = 0;
        var usersIds = users.Select(u => u.userId).ToList();

        do
        {
            await Task.Delay(3000);

            var result = await this.Query(new GetDownloadingTweetsState(usersIds));
            result.ForEach(r => this.SetUserDownloadingState(r.UserId, r.IsDownloadingTweets, r.UnreadTweetsCount));
            StateHasChanged();

            inProgress = result.Any(r => r.IsDownloadingTweets);
            tryCount += 1;

            Console.WriteLine("go tryCount -> " + tryCount);
        }
        while (inProgress && tryCount < 3);
    }
}