@implements IDisposable
@inject StateContainer StateContainer
@inject HttpClient Http
@inject TwitterNewsFeedApiClient apiClient

<MudTreeView
    @bind-SelectedValue="this.selectedItemId"
    Hover="false">
    @foreach(var group in this.groups)
    {
        <MudTreeViewItem
            @bind-Expanded="@group.IsExpanded"
            Text="@group.Name"
            Value="@group.Id"
            OnClick="e => this.OnClickGroup(group)">
            @foreach(var user in group.Users)
            {
                <MudTreeViewItem
                    Text="@user.Name"
                    Value="@user.Id"
                    OnClick="e => this.OnClickUser(user)" />
            }
        </MudTreeViewItem>
    }
</MudTreeView>

@code
{
    private List<Group> groups = new List<Group>();
    private int selectedItemId;

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
}

@*ViewModel*@
@code
{
    public class Group
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public bool IsExpanded { get; set; }

        public List<User> Users { get; set; } = new List<User>();
    }

    public class User
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public string TwitterUserId { get; set; } = string.Empty;
    }
}

@code {

    protected override async Task OnInitializedAsync()
    {
        StateContainer.Subscribers += this.Handle;

        var result = await this.Http.GetStringAsync($"/twitter/accounts/{this.StateContainer.AccountId}/menu");
        this.groups = result.DeserializeXml<List<Group>>();
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@code {
    
    private void Handle(IMessage message)
    {
    }
}

@code
{
    private async void OnClick(Action action)
    {
        action();
        await this.OnClickCallback.InvokeAsync();
    }

    private void OnClickGroup(Group group)
    {
        this.OnClick(() =>
        {
            this.StateContainer.Publish(new GroupSelected(group.Id, group.Name));
        });
    }

    private void OnClickUser(User user)
    {
        this.OnClick(() =>
        { 
            this.StateContainer.Publish(new UserSelected(user.Id, user.Name, user.TwitterUserId));
        });
    }
}
