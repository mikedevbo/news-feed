@using NewsFeed.Shared.Twitter.Commands
@using static NewsFeed.Shared.Twitter.Commands.StartDownloadingTweets
@implements IDisposable
@inject StateContainer StateContainer
@inject HttpClient Http
@inject TwitterNewsFeedApiClient apiClient
@inject StateContainer StateContainer

<div class="w3-container">
    <h3>@user.Name</h3>
</div>

<button class="w3-button w3-border w3-margin">Get</button>

@foreach(var tweet in this.tweets)
{
<div class="w3-container w3-panel">
    <div class="w3-card-4 w3-mobile" style="width:50%;">
        <div class="w3-container" style="@IsReadCss(tweet)">
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore
                et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
                aliquip ex ea commodo consequat.
            </p>
            <p>@tweet.Text</p>
        </div>
        <button class="w3-button w3-border w3-margin" @onclick="e => tweet.IsRead = !tweet.IsRead">Read</button>
        <button class="w3-button w3-border w3-margin w3-right">Favorite</button>
    </div>
</div>
}

@code
{
    private (int Id, string Name, string twitterId) user;
    private List<Tweet> tweets = new List<Tweet>();
}

@code
{

    protected override async Task OnInitializedAsync()
    {
        StateContainer.Subscribers += this.Handle;
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@code {

    private async void Handle(IMessage message)
    {
        switch (message)
        {
            case GroupSelected:
                //this.tweets = new List<Tweet>();
                //this.StateHasChanged();
                break;

            case UserSelected user:
                this.user = (user.Id, user.Name, user.TwitterUserId);
                this.tweets = await this.Http.GetFromJsonAsync<List<Tweet>>($"/twitter/accounts/{this.StateContainer.AccountId}/tweets/{this.user.Id}") ?? new List<Tweet>();
                this.StateHasChanged();
                break;
            case DownloadTweetsRequested:
                var userTwitterIds = (message as DownloadTweetsRequested)!.twitterUserIds;
                Console.WriteLine(userTwitterIds.Count());
                break;
        }
    }
}

@code
{
    private string IsReadCss(Tweet tweet)
    {
        return tweet.IsRead ? "font-weight: normal" : "font-weight: bold";
    }
}

@code
{
    private async Task StartDownloadingTweets(List<UserData> users)
    {
        var result = await this.Http.PostAsJsonAsync<StartDownloadingTweets>(
            $"/twitter/tweets/startdownloading",
            new StartDownloadingTweets(users)
        );

        result.EnsureSuccessStatusCode();
    }
}
