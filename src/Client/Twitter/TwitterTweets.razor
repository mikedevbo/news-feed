@implements IDisposable
@inject StateContainer StateContainer
@inject HttpClient Http
@inject StateContainer StateContainer

<div class="w3-container">
    <h3>@user.Name</h3>
</div>

@if(this.user.Id > 0)
{
    <button class="w3-button w3-border w3-margin" @onclick="e => DownloadTweets()">Get</button>
}

@foreach(var tweet in this.tweets)
{
<div class="w3-container w3-panel">
    <div class="w3-card-4 w3-mobile" style="width:50%;">
        <div class="w3-container" style="@IsReadCss(tweet)">
            <p>@tweet.Text</p>
        </div>
        <button class="w3-button w3-border w3-margin" @onclick="e => SetReadState(tweet)">Read</button>
            <button class="w3-button w3-border w3-margin w3-right" style="@IsFavoriteCss(tweet)" @onclick="e => SetPersistedState(tweet)">Favorite</button>
    </div>
</div>
}

@*Params*@
@code
{
    private (int Id, string Name, string TwitterId) user;
    private List<Tweet> tweets = new List<Tweet>();
}

@*Css*@
@code
{
    private string IsReadCss(Tweet tweet)
    {
        return tweet.IsRead ? "font-weight: normal" : "font-weight: bold";
    }

    private string IsFavoriteCss(Tweet tweet)
    {
        return tweet.IsFavorite ? "font-weight: bold" : "font-weight: normal";
    }
}

@*ViewModel*@
@code
{
    public class Tweet
    {
        public int Id { get; set; }

        public int UserId { get; set; }

        public string TweetId { get; set; } = string.Empty;

        public string Text { get; set; } = string.Empty;

        public DateTime? CreatedAt { get; set; }

        public bool IsRead { get; set; }

        public bool IsFavorite { get; set; }
    }

    public async Task<List<Tweet>> Query(GetTweetsRequest request)
    {
        var result = await Extensions.CallApi(Http, request);
        return result.DeserializeXml<List<Tweet>>();
    }
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        StateContainer.Subscribers += this.Handle;
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@*StateContainer*@
@code {

    private async void Handle(IMessage message)
    {
        switch (message)
        {
            case UserSelected user:
                this.user = (user.Id, user.Name, user.TwitterUserId);
                this.tweets = await this.Query(new GetTweetsRequest(this.user.Id));
                this.NotifyTweetsLoaded();
                this.StateHasChanged();
                break;
        }
    }
}

@*Actions*@
@code
{
    private async Task SetReadState(Tweet tweet)
    {
        tweet.IsRead = !tweet.IsRead;

        await Extensions.CallApi(Http, new SetReadStateRequest(tweet.Id, tweet.IsRead));

        this.NotifyTweetsLoaded();
    }

    private async Task SetPersistedState(Tweet tweet)
    {
        tweet.IsFavorite = !tweet.IsFavorite;

        await Extensions.CallApi(Http, new SetFavoriteStateRequest(tweet.Id, tweet.IsFavorite));
    }

    private void DownloadTweets()
    {
        this.StateContainer.Publish(new DownloadTweetsRequested(this.user.Id, this.user.TwitterId));
    }

    private void NotifyTweetsLoaded()
    {
        this.StateContainer.Publish(new TweetsLoaded(this.user.Id, this.tweets.Count(t => !t.IsRead)));
    }
}
