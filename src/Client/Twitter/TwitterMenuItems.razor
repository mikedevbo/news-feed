@implements IDisposable
@inject StateContainer StateContainer

@code {
    private SelectionContext selectionContext = SelectionContext.None;
    private (int groupId, string groupName) group;
    private (int userId, string userName, string twitterUserId) user;
}

@code {

    protected override void OnInitialized()
    {
        StateContainer.Subscribers += this.Handle;
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@code 
{
    private /*async*/ void Handle(IMessage message)
    {
        switch (message)
        {
            case GroupSelected group:
                this.group = (group.Id, group.Name);
                break;
            case UserSelected user:
                this.user = (user.Id, user.Name, user.TwitterUserId);
                break;
        }
    }
}

@code {

    private enum SelectionContext
    {
        None = 0,
        Group = 1,
        User = 2
    }

    private void DownloadTweets()
    {
        this.StateContainer.Publish(new DownloadTweetsRequested(new List<string> { this.user.twitterUserId }));
    }

}
