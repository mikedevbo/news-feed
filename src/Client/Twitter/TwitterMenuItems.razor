@implements IDisposable
@inject StateContainer StateContainer

<MudToolBar>
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Text">
        <MudButton OnClick="@DownloadTweets">Download Tweets</MudButton>
@*        <MudButton>Add</MudButton>
        <MudButton>Edit</MudButton>
        <MudButton>Delete</MudButton>*@
    </MudButtonGroup>
</MudToolBar>

@code {
    private SelectionContext selectionContext = SelectionContext.None;
    private Group group = new Group();
    private User user = new User();
}

@code {

    protected override void OnInitialized()
    {
        StateContainer.Subscribers += this.Handle;
    }

    public void Dispose()
    {
        StateContainer.Subscribers -= this.Handle;
    }
}

@code 
{
    private /*async*/ void Handle(IMessage message)
    {
        switch (message)
        {
            case GroupSelected:
                this.group = (message as GroupSelected)?.Group!;
                break;
            case UserSelected:
                this.user = (message as UserSelected)?.User!;
                break;
        }
    }
}

@code {

    private enum SelectionContext
    {
        None = 0,
        Group = 1,
        User = 2
    }

    private void DownloadTweets()
    {
        this.StateContainer.Publish(new DownloadTweetsRequested(new List<string> { this.user.TwitterUserId }));
    }

}
